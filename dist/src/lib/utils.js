let $object = 'object', $string = 'string', $function = 'function', $undefined = 'undefined', $number = 'number';
//foreach for arrays, collections, objects
const foreach = (collection, callback, scope = {}) => {
    if (Object.prototype.toString.call(collection) === "[object Object]") {
        for (var prop in collection) {
            if (Object.prototype.hasOwnProperty.call(collection, prop)) {
                callback.call(scope, collection[prop], prop, collection);
            }
        }
    }
    else {
        for (var i = 0; i < collection.length; i++) {
            callback.call(scope, collection[i], i, collection);
        }
    }
};
const lookup = (obj, path, defaultValue) => {
    var value, patharr, k;
    if (path) {
        if (!isNaN(parseInt(path))) {
            return path;
        }
        patharr = path.trim().split(".");
        if (obj) {
            for (var i = 0; i < patharr.length; i++) {
                k = k ? k[patharr[i]] : obj[patharr[i]];
                if (k && !isObject(k)) {
                    value = k;
                    return value;
                }
            }
            value = k;
        }
    }
    return value || defaultValue;
};
const klass = Symbol('klass');
const isNumber = (value) => typeof value === $number;
const isArray = (value) => value instanceof Array;
const isObject = (value) => value !== null && typeof value === $object;
const isString = (value) => typeof value === $string;
const isFunction = (value) => typeof value === $function;
const isUndefined = (value) => typeof value == $undefined;
const isDefined = (value) => typeof value != $undefined;
const INPUT_METADATA_KEY = Symbol("design:inputTypes");
export { foreach, isNumber, lookup, isArray, isObject, isString, isFunction, isUndefined, isDefined, klass, INPUT_METADATA_KEY };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLElBQUksT0FBTyxHQUFHLFFBQVEsRUFDcEIsT0FBTyxHQUFHLFFBQVEsRUFDbEIsU0FBUyxHQUFHLFVBQVUsRUFDdEIsVUFBVSxHQUFHLFdBQVcsRUFDeEIsT0FBTyxHQUFHLFFBQVEsQ0FBQztBQUNyQiwwQ0FBMEM7QUFDMUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxVQUFxQixFQUFFLFFBQTZDLEVBQUUsUUFBWSxFQUFFLEVBQUUsRUFBRTtJQUN2RyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxpQkFBaUIsRUFBRTtRQUNwRSxLQUFLLElBQUksSUFBSSxJQUFJLFVBQVUsRUFBRTtZQUMzQixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQzFELFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7YUFDMUQ7U0FDRjtLQUNGO1NBQU07UUFDTCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMxQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQ3BEO0tBQ0Y7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQWUsRUFBRSxJQUFZLEVBQUUsWUFBaUIsRUFBRSxFQUFFO0lBQ2xFLElBQUksS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDdEIsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQzFCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxJQUFJLEdBQUcsRUFBRTtZQUNQLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN2QyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ3JCLEtBQUssR0FBRyxDQUFDLENBQUM7b0JBQ1YsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7YUFDRjtZQUNELEtBQUssR0FBRyxDQUFDLENBQUM7U0FDWDtLQUNGO0lBQ0QsT0FBTyxLQUFLLElBQUksWUFBWSxDQUFDO0FBQy9CLENBQUMsQ0FBQTtBQUVELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM5QixNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQVMsRUFBRSxFQUFFLENBQUMsT0FBTyxLQUFLLEtBQUssT0FBTyxDQUFDO0FBQ3pELE1BQU0sT0FBTyxHQUFHLENBQUMsS0FBUyxFQUFFLEVBQUUsQ0FBQyxLQUFLLFlBQVksS0FBSyxDQUFDO0FBQ3RELE1BQU0sUUFBUSxHQUFHLENBQUMsS0FBUyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLE9BQU8sQ0FBQztBQUMzRSxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQVMsRUFBRSxFQUFFLENBQUMsT0FBTyxLQUFLLEtBQUssT0FBTyxDQUFDO0FBQ3pELE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBUyxFQUFFLEVBQUUsQ0FBQyxPQUFPLEtBQUssS0FBSyxTQUFTLENBQUM7QUFDN0QsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFTLEVBQUUsRUFBRSxDQUFDLE9BQU8sS0FBSyxJQUFJLFVBQVUsQ0FBQztBQUM5RCxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQVMsRUFBRSxFQUFFLENBQUMsT0FBTyxLQUFLLElBQUksVUFBVSxDQUFDO0FBQzVELE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFFdkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRSxDQUFDIn0=