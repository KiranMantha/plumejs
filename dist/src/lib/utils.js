let $object = 'object', $string = 'string', $function = 'function', $undefined = 'undefined', $number = 'number';
const foreach = (collection, callback, scope = {}) => {
    if (Object.prototype.toString.call(collection) === "[object Object]") {
        for (var prop in collection) {
            if (Object.prototype.hasOwnProperty.call(collection, prop)) {
                callback.call(scope, collection[prop], prop, collection);
            }
        }
    }
    else {
        for (var i = 0; i < collection.length; i++) {
            callback.call(scope, collection[i], i, collection);
        }
    }
};
const lookup = (obj, path, defaultValue) => {
    var value, patharr, k;
    if (path) {
        if (!isNaN(parseInt(path))) {
            return path;
        }
        patharr = path.trim().split(".");
        if (obj) {
            for (var i = 0; i < patharr.length; i++) {
                k = k ? k[patharr[i]] : obj[patharr[i]];
                if (k && !isObject(k)) {
                    value = k;
                    return value;
                }
            }
            value = k;
        }
    }
    return value || defaultValue;
};
const klass = Symbol('klass');
const isNumber = (value) => typeof value === $number;
const isArray = (value) => value instanceof Array;
const isObject = (value) => value !== null && typeof value === $object;
const isString = (value) => typeof value === $string;
const isFunction = (value) => typeof value === $function;
const isUndefined = (value) => typeof value == $undefined;
const isDefined = (value) => typeof value != $undefined;
const INPUT_METADATA_KEY = Symbol("design:inputTypes");
export { foreach, isNumber, lookup, isArray, isObject, isString, isFunction, isUndefined, isDefined, klass, INPUT_METADATA_KEY };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLElBQUksT0FBTyxHQUFHLFFBQVEsRUFDcEIsT0FBTyxHQUFHLFFBQVEsRUFDbEIsU0FBUyxHQUFHLFVBQVUsRUFDdEIsVUFBVSxHQUFHLFdBQVcsRUFDeEIsT0FBTyxHQUFHLFFBQVEsQ0FBQztBQUVyQixNQUFNLE9BQU8sR0FBRyxDQUFDLFVBQXFCLEVBQUUsUUFBNkMsRUFBRSxRQUFZLEVBQUUsRUFBRSxFQUFFO0lBQ3ZHLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLGlCQUFpQixFQUFFO1FBQ3BFLEtBQUssSUFBSSxJQUFJLElBQUksVUFBVSxFQUFFO1lBQzNCLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRTtnQkFDMUQsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQzthQUMxRDtTQUNGO0tBQ0Y7U0FBTTtRQUNMLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDcEQ7S0FDRjtBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBZSxFQUFFLElBQVksRUFBRSxZQUFpQixFQUFFLEVBQUU7SUFDbEUsSUFBSSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUN0QixJQUFJLElBQUksRUFBRTtRQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLElBQUksR0FBRyxFQUFFO1lBQ1AsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN4QyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDckIsS0FBSyxHQUFHLENBQUMsQ0FBQztvQkFDVixPQUFPLEtBQUssQ0FBQztpQkFDZDthQUNGO1lBQ0QsS0FBSyxHQUFHLENBQUMsQ0FBQztTQUNYO0tBQ0Y7SUFDRCxPQUFPLEtBQUssSUFBSSxZQUFZLENBQUM7QUFDL0IsQ0FBQyxDQUFBO0FBRUQsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzlCLE1BQU0sUUFBUSxHQUFHLENBQUMsS0FBUyxFQUFFLEVBQUUsQ0FBQyxPQUFPLEtBQUssS0FBSyxPQUFPLENBQUM7QUFDekQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUFTLEVBQUUsRUFBRSxDQUFDLEtBQUssWUFBWSxLQUFLLENBQUM7QUFDdEQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxLQUFTLEVBQUUsRUFBRSxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssT0FBTyxDQUFDO0FBQzNFLE1BQU0sUUFBUSxHQUFHLENBQUMsS0FBUyxFQUFFLEVBQUUsQ0FBQyxPQUFPLEtBQUssS0FBSyxPQUFPLENBQUM7QUFDekQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFTLEVBQUUsRUFBRSxDQUFDLE9BQU8sS0FBSyxLQUFLLFNBQVMsQ0FBQztBQUM3RCxNQUFNLFdBQVcsR0FBRyxDQUFDLEtBQVMsRUFBRSxFQUFFLENBQUMsT0FBTyxLQUFLLElBQUksVUFBVSxDQUFDO0FBQzlELE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBUyxFQUFFLEVBQUUsQ0FBQyxPQUFPLEtBQUssSUFBSSxVQUFVLENBQUM7QUFDNUQsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUV2RCxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFFLENBQUMifQ==